[{"body":"\u0026ldquo;Device is ignored temporarily\u0026rdquo; alert will be shown in any of the following cases:\n If you hold keys or buttons down before Karabiner-Elements open the device. Your device sends unintented key up events regardless you do not touch the keys.\n(e.g., Swiftpoint ProPoint sends key up events of the music play key periodically.)  Press the described key or button again to dismiss the alert.\n  ","excerpt":"\u0026ldquo;Device is ignored temporarily\u0026rdquo; alert will be shown in any of the following cases:\n If …","ref":"/docs/manual/misc/ignored-temporarily/","title":"About \"Device is ignored temporarily\" alert"},{"body":"The allow button on System Preferences \u0026gt; Security \u0026gt; Privacy should be hidden after you click it. If the button does not hide after click, you did not succeed to click it.\n  Reason It\u0026rsquo;s because macOS blocks the click if you are using an app which intercepts mouse events. You have to quit them before pressing the allow button.\nApps which prevent the click:\n Google Chrome Dropbox MagicPrefs SteerMouse Witch Sonos Desktop Controller for Mac If you are using macOS from remote via Screen Sharing, you cannot click the allow button. etc.  Find what app prevents the click You can find apps which prevents the click if you are using macOS Mojave or later.\n Choose Privacy tab on System Preferences \u0026gt; Security \u0026gt; Privacy.    Choose Accessibility. The enabled apps in the list prevent the click. You have to close these apps.      Other workarounds There are other workarounds if you cannot find apps that intercept mouse events.\nClick Allow button via keyboard operation You can press Allow button via keyboard operation.\n Change Full Keyboard Access configuration.  Open System Preferences \u0026gt; Keyboard \u0026gt; Shortcuts. Change Full Keyboard Access configuration to All controls.   Click Allow button.  Open System Preferences \u0026gt; Security \u0026gt; Privacy. Move focus to Allow button by using tab or shift+tab key. Press spacebar on Allow button.    Using safe mode You can press Allow button by starting your Mac in safe mode since any extra apps which prevent clicking the Allow button is not launched automatically in safe mode.\n Download Karabiner-Elements before restarting your Mac. Restart your Mac in safe mode by press and hold the shift key at boot. Reinstall Karabiner-Elements from downloaded file. Open System Preferences and confirm the Allow button is shown. If the Allow button is hidden, close System Preferences and open it again. Click the Allow button. Restart your Mac and boot in normal mode.  ","excerpt":"The allow button on System Preferences \u0026gt; Security \u0026gt; Privacy should be hidden after you click …","ref":"/docs/help/troubleshooting/kext-allow-button-does-not-work/","title":"Allow button on System Preferences \u003e Security \u003e Privacy does not work"},{"body":"You can change a key to another key on Simple Modifications tab.\n Choose target device, then press Add item button.      Select From key and To key.    Confirm the result using Karabiner-EventViewer.  Tip You can find the key name by Karabiner-EventViewer.\n   ","excerpt":"You can change a key to another key on Simple Modifications tab.\n Choose target device, then press …","ref":"/docs/manual/configuration/configure-simple-modifications/","title":"Change a key to another key"},{"body":"Karabiner-Elements configuration file paths:\n ~/.config/karabiner/karabiner.json  Main configuration file.\nKarabiner-Elements watches this file and reload it automatically when it is updated.   ~/.config/karabiner/assets/complex_modifications  Imported complex_modifications files.\nYou can use them in Preferences \u0026gt; Complex Modifications \u0026gt; Add rule.    Tip: file update detection and automatic reload Karabiner-Elements watches ~/.config/karabiner/karabiner.json and reloads it if updated.\nThe mechanism is that Karabiner-Elements watches the parent directory ~/.config/karabiner by using the File System Events API.\nThus, Karabiner-Elements fails detecting file updates after you change the parent directory (e.g., recreate the parent directory).\n Log file Error messages will be output into ~/.local/share/karabiner/log/console_user_server.log if there are errors such as parse error.\nYou can also view the error messages in Karabiner-Elements Preferences \u0026gt; Log.\n  ","excerpt":"Karabiner-Elements configuration file paths:\n ~/.config/karabiner/karabiner.json  Main configuration …","ref":"/docs/json/location/","title":"File location"},{"body":"{ \u0026#34;from\u0026#34;: { \u0026#34;key_code\u0026#34;: \u0026#34;The name of key_code\u0026#34;, \u0026#34;consumer_key_code\u0026#34;: \u0026#34;The name of consumer_key_code\u0026#34;, \u0026#34;pointing_button\u0026#34;: \u0026#34;The name of pointing_button\u0026#34;, \u0026#34;any\u0026#34;: \u0026#34;key_code or consumer_key_code or pointing_button\u0026#34;, \u0026#34;modifiers\u0026#34;: { \u0026#34;mandatory\u0026#34;: [ modifier, modifier, ... ], \u0026#34;optional\u0026#34;: [ modifier, modifier, ... ] }, \u0026#34;simultaneous\u0026#34;: [ { \u0026#34;key_code, consumer_key_code, pointing_button or any\u0026#34; }, { \u0026#34;key_code, consumer_key_code, pointing_button or any\u0026#34; }, ... ], \u0026#34;simultaneous_options\u0026#34;: { \u0026#34;detect_key_down_uninterruptedly\u0026#34;: false, \u0026#34;key_down_order\u0026#34;: \u0026#34;A restriction of input events order\u0026#34;, \u0026#34;key_up_order\u0026#34;: \u0026#34;A restriction of input events order\u0026#34;, \u0026#34;key_up_when\u0026#34;: \u0026#34;When key_up events are posted\u0026#34;, \u0026#34;to_after_key_up\u0026#34;: [ to event definition, to event definition, ... ] } } }    Name Required Description     key_code Optional Key code which you want to change   consumer_key_code Optional Consumer key code (media key code) which you want to change   pointing_button Optional Pointing button name which you want to change   any Optional \u0026quot;any\u0026quot;: \u0026quot;key_code\u0026quot;, \u0026quot;any\u0026quot;: \u0026quot;consumer_key_code\u0026quot; or \u0026quot;any\u0026quot;: \u0026quot;pointing_button\u0026quot;   modifiers Optional Specify mandatory and optional modifiers (e.g., \u0026ldquo;change control-h to delete\u0026rdquo;)   simultaneous Optional Specify multiple events which are pressed simultaneously   simultaneous_options Optional Options for simultaneous    Note key_code, consumer_key_code, pointing_button and any are exclusive.\nYou have to specify one of them.  Caution Be careful using \u0026quot;pointing_button\u0026quot;: \u0026quot;button1\u0026quot; and \u0026quot;any\u0026quot;: \u0026quot;pointing_button\u0026quot;.\nYou may lose the left click button and system will be unusable.  Detail  from.any from.modifiers from.simultaneous from.simultaneous_options  Investigate key names  You can find key_code, consumer_key_code and pointing_button names by EventViewer. You can also confirm names in list. (See \u0026quot;data\u0026quot; in the list.)  Tips You can also specify key_code, consumer_key_code, pointing_button with raw number as follows.\n{ \u0026#34;from\u0026#34;: { \u0026#34;key_code\u0026#34;: 41 } } Do not add double quotes when you use the raw number.\n ","excerpt":"{ \u0026#34;from\u0026#34;: { \u0026#34;key_code\u0026#34;: \u0026#34;The name of key_code\u0026#34;, \u0026#34;consumer_key_code\u0026#34;: …","ref":"/docs/json/complex-modifications-manipulator-definition/from/","title":"from event definition"},{"body":"You can use from.any as follows.\nThese matches all key codes, consumer key codes or pointing buttons.\n \u0026quot;any\u0026quot;: \u0026quot;key_code\u0026quot; \u0026quot;any\u0026quot;: \u0026quot;consumer_key_code\u0026quot; \u0026quot;any\u0026quot;: \u0026quot;pointing_button\u0026quot;  Caution Be careful using \u0026quot;any\u0026quot;: \u0026quot;pointing_button\u0026quot;.\nYou may lose the left click button and system will be unusable.  ","excerpt":"You can use from.any as follows.\nThese matches all key codes, consumer key codes or pointing …","ref":"/docs/json/complex-modifications-manipulator-definition/from/any/","title":"from.any"},{"body":"Change an event if/unless the frontmost application is the specified application.\n{ \u0026#34;type\u0026#34;: \u0026#34;frontmost_application_if\u0026#34;, \u0026#34;bundle_identifiers\u0026#34;: [ bundle identifier regex, bundle identifier regex, ... ], \u0026#34;file_paths\u0026#34;: [ file path regex, file path regex, ... ] }    Name Required Description     type Required \u0026quot;frontmost_application_if\u0026quot; or \u0026quot;frontmost_application_unless\u0026quot;   bundle_identifiers Optional Bundle identifier regexs such as [\u0026quot;^com\\\\.apple\\\\.Terminal$\u0026quot;, \u0026quot;^com\\\\.googlecode\\\\.iterm2$\u0026quot;]   file_paths Optional File path regexs such as [\u0026quot;/Finder$\u0026quot;]   description Optional A human-readable comment    Multiple bundle identifiers or file paths Multiple entries in bundle_identifiers and file_paths are joined by \u0026ldquo;or\u0026rdquo;.\nThe following condition is matched if bundle identifier is \u0026ldquo;com.apple.Terminal\u0026rdquo; or \u0026ldquo;com.googlecode.iterm2\u0026rdquo;.\n{ \u0026#34;type\u0026#34;: \u0026#34;frontmost_application_if\u0026#34;, \u0026#34;bundle_identifiers\u0026#34;: [ \u0026#34;^com\\\\.apple\\\\.Terminal$\u0026#34;, \u0026#34;^com\\\\.googlecode\\\\.iterm2$\u0026#34; ] } Investigate the bundle identifier and file path You can find the bundle identifier and file path by EventViewer \u0026gt; Frontmost Application tab.\nOpen EventViewer, and then switch the frontmost application to an application which you want to know the bundle identifer or file path.\n  ","excerpt":"Change an event if/unless the frontmost application is the specified application.\n{ \u0026#34;type\u0026#34;: …","ref":"/docs/json/complex-modifications-manipulator-definition/conditions/frontmost-application/","title":"frontmost_application_if, frontmost_application_unless"},{"body":"Karabiner-Elements does not modify mouse devices by default.\n  You have to enable your mouse on Karabiner-Elements Preferences \u0026gt; Devices.     Then, use Simple Modifications to assign a key to a button or use Complex Modifications for more advanced usage.     ","excerpt":"Karabiner-Elements does not modify mouse devices by default.\n  You have to enable your mouse on …","ref":"/docs/help/how-to/mouse-button/","title":"How to change mouse buttons"},{"body":"Quit from menu bar or Misc tab on Preferences.\n     ","excerpt":"Quit from menu bar or Misc tab on Preferences.\n     ","ref":"/docs/manual/operation/quit/","title":"How to quit"},{"body":"Some operations are required to grant properly permission from macOS to Karabiner-Elements. Follow this instruction to set up Karabiner-Elements.\nInstall Karabiner-Elements  Open the downloaded file.  Open a pkg file.  The installer will be opened. Install Karabiner-Elements.     Open Karabiner-Elements Preferences  Open Karabiner-Elements from Launchpad.     Allow using kext which provides virtual devices for Karabiner-Elements  An alert about kext policy will be shown since macOS High Sierra when you open Karabiner-Elements Preferences. Click Open System Preferences \u0026gt; Security \u0026amp; Privacy button, then press Allow button.     Note Please follow this instruction if there are any problem about the Allow button.  Grant Input Monitoring to Karabiner-Elements processes  Two Keystroke Receiving alerts will be shown on macOS Catalina or later after you allow the kernel extension. Press Open System Preferences button on both alerts.      System Preferences will be open after you press the Open System Preferences button. Choose Privacy \u0026gt; Input Monitoring, and then enable karabiner_grabber and karabiner_observer. (You have to unlock configuration by the left bottom icon.)     Setup your keyboard layout  Keyboard Setup Assistant will be opened. Choose your keyboard layout. (ANSI, ISO or JIS)     Configure Karabiner-Elements Enjoy keyboard configuration!\n Configuration manual  ","excerpt":"Some operations are required to grant properly permission from macOS to Karabiner-Elements. Follow …","ref":"/docs/getting-started/installation/","title":"Installation"},{"body":"Karabiner-Elements installs files into the following locations.\nSystem files /Applications/Karabiner-Elements.app /Applications/Karabiner-EventViewer.app /Library/Application Support/org.pqrs/Karabiner-Elements /Library/Application Support/org.pqrs/Karabiner-VirtualHIDDevice /Library/Application Support/org.pqrs/config /Library/Application Support/org.pqrs/tmp /Library/LaunchDaemons/org.pqrs.karabiner.karabiner_grabber.plist /Library/LaunchDaemons/org.pqrs.karabiner.karabiner_kextd.plist /Library/LaunchDaemons/org.pqrs.karabiner.karabiner_observer.plist /Library/LaunchAgents/org.pqrs.karabiner.agent.karabiner_grabber.plist /Library/LaunchAgents/org.pqrs.karabiner.agent.karabiner_observer.plist /Library/LaunchAgents/org.pqrs.karabiner.karabiner_console_user_server.plist /Library/LaunchAgents/org.pqrs.karabiner.karabiner_session_monitor.plist /var/log/karabiner User files ~/.config/karabiner ~/.local/share/karabiner ~/Library/Preferences/org.pqrs.Karabiner-Elements.Preferences.plist ~/Library/Preferences/org.pqrs.Karabiner-Elements.Updater.plist ~/Library/Preferences/org.pqrs.Karabiner-EventViewer.plist ~/Library/Preferences/org.pqrs.Karabiner-Menu.plist ~/Library/Preferences/org.pqrs.Karabiner-MultitouchExtension.plist  Warning If you want to remove Karabiner-Elements, you have to use uninstaller.  ","excerpt":"Karabiner-Elements installs files into the following locations.\nSystem files …","ref":"/docs/help/advanced-topics/installed-files/","title":"Installed files"},{"body":"mouse_motion_to_scroll changes mouse cursor movement to scroll wheel.\n{ \u0026#34;type\u0026#34;: \u0026#34;mouse_motion_to_scroll\u0026#34;, \u0026#34;from\u0026#34;: { \u0026#34;modifiers\u0026#34;: { \u0026#34;mandatory\u0026#34;: [...], \u0026#34;optional\u0026#34;: [...] } }, \u0026#34;conditions\u0026#34;: ..., \u0026#34;options\u0026#34;: { \u0026#34;momentum_scroll_enabled\u0026#34;: true, \u0026#34;speed_multiplier\u0026#34;: 1.0 } }    Key Value Required Description     type \u0026quot;mouse_motion_to_scroll\u0026quot; Required \u0026mdash;   from.modifiers Same as basic.from.modifiers Optional Enable mouse_motion_to_scroll if specified modifiers are pressed   conditions Same as basic.conditions Optional Enable mouse_motion_to_scroll when specified conditions   options An object of parameters Optional \u0026mdash;    Caution You should set either from.modifiers or conditions.\nYour mouse cursor movement will be always changed to scroll and your mouse will be unusable without from.modifiers and conditions.\n Options    Key Value Required Description     momentum_scroll_enabled true or false Optional Enable Momentum scroll. The default value is true.   speed_multiplier float value Optional Multiply scroll speed. The default value is 1.0.    Example The following json changes button4 + mouse movement to scroll.\n[ { \u0026#34;type\u0026#34;: \u0026#34;basic\u0026#34;, \u0026#34;from\u0026#34;: { \u0026#34;pointing_button\u0026#34;: \u0026#34;button4\u0026#34;, \u0026#34;modifiers\u0026#34;: { \u0026#34;optional\u0026#34;: [\u0026#34;any\u0026#34;] } }, \u0026#34;to\u0026#34;: [ { \u0026#34;set_variable\u0026#34;: { \u0026#34;name\u0026#34;: \u0026#34;enable_mouse_motion_to_scroll\u0026#34;, \u0026#34;value\u0026#34;: 1 } } ], \u0026#34;to_after_key_up\u0026#34;: [ { \u0026#34;set_variable\u0026#34;: { \u0026#34;name\u0026#34;: \u0026#34;enable_mouse_motion_to_scroll\u0026#34;, \u0026#34;value\u0026#34;: 0 } } ] }, { \u0026#34;type\u0026#34;: \u0026#34;mouse_motion_to_scroll\u0026#34;, \u0026#34;from\u0026#34;: { \u0026#34;modifiers\u0026#34;: { \u0026#34;optional\u0026#34;: [\u0026#34;any\u0026#34;] } }, \u0026#34;conditions\u0026#34;: [ { \u0026#34;type\u0026#34;: \u0026#34;variable_if\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;enable_mouse_motion_to_scroll\u0026#34;, \u0026#34;value\u0026#34;: 1 } ] } ] ","excerpt":"mouse_motion_to_scroll changes mouse cursor movement to scroll wheel.\n{ \u0026#34;type\u0026#34;: …","ref":"/docs/json/complex-modifications-manipulator-definition/other-types/mouse-motion-to-scroll/","title":"mouse_motion_to_scroll"},{"body":"Karabiner-MultitouchExtension allows you to change keys only when the finger is on the trackpad.\nYou can use variable_if or variable_unless to determine either the finger is on trackpad.\nExample The following json changes k key to up_arrow when the finger is on the trackpad.\n{ \u0026#34;type\u0026#34;: \u0026#34;basic\u0026#34;, \u0026#34;from\u0026#34;: { \u0026#34;key_code\u0026#34;: \u0026#34;k\u0026#34;, \u0026#34;modifiers\u0026#34;: { \u0026#34;optional\u0026#34;: [\u0026#34;any\u0026#34;] } }, \u0026#34;to\u0026#34;: [ { \u0026#34;key_code\u0026#34;: \u0026#34;up_arrow\u0026#34; } ], \u0026#34;conditions\u0026#34;: [ { \u0026#34;type\u0026#34;: \u0026#34;variable_unless\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;multitouch_extension_finger_count_total\u0026#34;, \u0026#34;value\u0026#34;: 0 } ] } Variables Karabiner-MultitouchExtension changes the following variables when the finger count on the trackpad is changed.\n   Name Value     multitouch_extension_finger_count_total Total count of fingers on the trackpad   multitouch_extension_finger_count_upper_half_area Count of fingers on the upper half of trackpad   multitouch_extension_finger_count_lower_half_area Count of fingers on the lower half of trackpad   multitouch_extension_finger_count_left_half_area Count of fingers on the left half of trackpad   multitouch_extension_finger_count_right_half_area Count of fingers on the right half of trackpad    Note  finger_count_total == finger_count_upper_half_area + finger_count_lower_half_area finger_count_total == finger_count_left_half_area + finger_count_right_half_area   You can confirm the variables state on Karabiner-EventViewer \u0026gt; Variables.\n  ","excerpt":"Karabiner-MultitouchExtension allows you to change keys only when the finger is on the trackpad.\nYou …","ref":"/docs/json/extra/multitouch-extension/","title":"MultitouchExtension integration"},{"body":"shell_command executes the shell command.\nExamples Open application { \u0026#34;to\u0026#34;: [ { \u0026#34;shell_command\u0026#34;: \u0026#34;open -a \u0026#39;Safari.app\u0026#39;\u0026#34; } ] } Execute shell from file { \u0026#34;to\u0026#34;: [ { \u0026#34;shell_command\u0026#34;: \u0026#34;/bin/sh ~/opt/shell_commands/hello.sh\u0026#34; } ] } ","excerpt":"shell_command executes the shell command.\nExamples Open application { \u0026#34;to\u0026#34;: [ { …","ref":"/docs/json/complex-modifications-manipulator-definition/to/shell-command/","title":"to.shell_command"},{"body":"Change an event if/unless the event is from specified device.\n{ \u0026#34;type\u0026#34;: \u0026#34;device_if\u0026#34;, \u0026#34;identifiers\u0026#34;: [ { \u0026#34;vendor_id\u0026#34;: 1111, \u0026#34;product_id\u0026#34;: 2222, \u0026#34;description\u0026#34;: \u0026#34;my keyboard 1\u0026#34; }, { \u0026#34;vendor_id\u0026#34;: 3333, \u0026#34;product_id\u0026#34;: 4444, \u0026#34;description\u0026#34;: \u0026#34;my keyboard 2\u0026#34; }, ... ] }    Name Required Description     type Required \u0026quot;device_if\u0026quot; or \u0026quot;device_unless\u0026quot;   identifiers Required Target device definitions   description Optional A human-readable comment    identifiers identifiers is an array of objects.\n   Name Required Description     vendor_id Optional Vendor ID of device which is fixed value for each device   product_id Optional Product ID of device which is fixed value for each device   location_id Optional Location ID of device which is changed by where the port your device is connected   is_keyboard Optional true or false   is_pointing_device Optional true or false    Multiple identifiers If you specify multiple identifiers (vendor_id, product_id, location_id, \u0026hellip;), these are joined by \u0026ldquo;and\u0026rdquo;.\nThe following condition is matched if Vendor ID is 1111 and Product ID is 2222.\n{ \u0026#34;type\u0026#34;: \u0026#34;device_if\u0026#34;, \u0026#34;identifiers\u0026#34;: [ { \u0026#34;vendor_id\u0026#34;: 1111, \u0026#34;product_id\u0026#34;: 2222 } ] } Multiple entries If you specify multiple entries at identifiers, conditions are joined by \u0026ldquo;or\u0026rdquo;.\nThe following condition is matched if Vendor ID is 1111 or 1112.\n{ \u0026#34;type\u0026#34;: \u0026#34;device_if\u0026#34;, \u0026#34;identifiers\u0026#34;: [ { \u0026#34;vendor_id\u0026#34;: 1111 }, { \u0026#34;vendor_id\u0026#34;: 1112 } ] } Investigate the device identifiers You can find them by EventViewer \u0026gt; Devices tab.\n  ","excerpt":"Change an event if/unless the event is from specified device.\n{ \u0026#34;type\u0026#34;: \u0026#34;device_if\u0026#34;, …","ref":"/docs/json/complex-modifications-manipulator-definition/conditions/device/","title":"device_if, device_unless"},{"body":"Karabiner-Elements is a powerful and stable keyboard customizer for macOS.\nCore features  Simple Modifications: Change normal keys to other keys. Complex Modifications: Change keys by complex rules.  Change a key to combination of modifiers. (e.g. change capslock to control+command) Change modifiers+key to key. (e.g. change control+m to return) Send key events if a key is pressed alone. Send key events if keys are pressed simultaneously. Mouse keys. etc.   Function Keys: Change f1-f12 keys to media controls. Devices: Apply modifications to specified keyboards only. Profiles: Support multiple profiles. Modifier Flag Sync: Synchronize modifier flags across all connected keyboards. Secure Keyboard Entry Support: Work well on Secure Keyboard Entry environment such as a password prompt, terminal with Secure Keyboard Entry, etc.  Current limitations  Karabiner-Elements cannot modify the eject key on some keyboard (e.g., Apple Wired Keyboard) due to the limitation of macOS API. Karabiner-Elements cannot modify the fn key on non-Apple keyboards such as Logitech keyboards. Karabiner-Elements ignores the System Preferences \u0026gt; Keyboard \u0026gt; Modifier Keys... configuration. Change modifiers by using Simple Modifications. (Detail of input event modification chaining)  ","excerpt":"Karabiner-Elements is a powerful and stable keyboard customizer for macOS.\nCore features  Simple …","ref":"/docs/getting-started/features/","title":"Features"},{"body":"from.modifiers is a object which has the following keys.\n   Key Value Required Description     mandatory An array of strings Optional Modifiers which must be pressed   optional An array of strings Optional Modifiers which can be pressed    from.modifiers.mandatory  Events are manipulated only if mandatory modifiers are pressed. Mandatory modifiers are removed from to events.  from.modifiers.optional  Events are also manipulated even if optional modifiers are pressed. Optional modifiers are kept in to events.  Tip If you do not include any in modifiers.optional, your manipulator does not change event if extra modifiers (modifiers which are not included in modifiers.mandatory) are pressed.  List of modifiers modifiers.mandatory and modifiers.optional are array of the folowing strings.\n   Name Description     caps_lock \u0026mdash;   left_command \u0026mdash;   left_control \u0026mdash;   left_option \u0026mdash;   left_shift \u0026mdash;   right_command \u0026mdash;   right_control \u0026mdash;   right_option \u0026mdash;   right_shift \u0026mdash;   fn \u0026mdash;   command Either left command or right command is pressed   control Either left control or right control is pressed   option Either left option or right option is pressed   shift Either left shift or right shift is pressed   left_alt Alias of left_option (available since Karabiner-Elements 12.3.0)   left_gui Alias of left_command (available since Karabiner-Elements 12.3.0)   right_alt Alias of right_option (available since Karabiner-Elements 12.3.0)   right_gui Alias of right_command (available since Karabiner-Elements 12.3.0)   any Any modifiers    Examples Without modifiers This json defines manipulator which changes escape to tab.\n{ \u0026#34;type\u0026#34;: \u0026#34;basic\u0026#34;, \u0026#34;from\u0026#34;: { \u0026#34;key_code\u0026#34;: \u0026#34;escape\u0026#34; }, \u0026#34;to\u0026#34;: [ { \u0026#34;key_code\u0026#34;: \u0026#34;tab\u0026#34; } ] }  Without modifiers, the event is changed only any modifiers are not pressed.     Input Output Manipulated     escape tab Manipulated   left_shift + escape left_shift + escape Not manipulated   left_control + escape left_control + escape Not manipulated    With modifiers.optional This json defines manipulator which changes escape to tab. (left_shift and left_control can be pressed.)\n{ \u0026#34;type\u0026#34;: \u0026#34;basic\u0026#34;, \u0026#34;from\u0026#34;: { \u0026#34;key_code\u0026#34;: \u0026#34;escape\u0026#34;, \u0026#34;modifiers\u0026#34;: { \u0026#34;optional\u0026#34;: [\u0026#34;left_shift\u0026#34;, \u0026#34;left_control\u0026#34;] } }, \u0026#34;to\u0026#34;: [ { \u0026#34;key_code\u0026#34;: \u0026#34;tab\u0026#34; } ] }  The optional modifiers (left_shift and left_control) are kept in output events. The event is not changed if modifiers are not included in optional such as left_option.     Input Output Manipulated     escape tab Manipulated   left_shift + escape left_shift + tab Manipulated   left_control + escape left_control + tab Manipulated   left_option + escape left_option + escape Not manipulated   left_shift + left_option + escape left_shift + left_option + escape Not manipulated    With modifiers.mandatory This json defines manipulator which changes control + h to delete_or_backspace.\n{ \u0026#34;type\u0026#34;: \u0026#34;basic\u0026#34;, \u0026#34;from\u0026#34;: { \u0026#34;key_code\u0026#34;: \u0026#34;h\u0026#34;, \u0026#34;modifiers\u0026#34;: { \u0026#34;mandatory\u0026#34;: [\u0026#34;control\u0026#34;] } }, \u0026#34;to\u0026#34;: [ { \u0026#34;key_code\u0026#34;: \u0026#34;delete_or_backspace\u0026#34; } ] }  The mandatory modifier (control) are removed in output events. The event is not changed if left_control and right_control are not pressed.     Input Output Manipulated     h h Not manipulated   left_control + h delete_or_backspace Manipulated   left_control + left_option + h left_control + left_option + h Not manipulated    With modifiers.mandatory and modifiers.optional { \u0026#34;type\u0026#34;: \u0026#34;basic\u0026#34;, \u0026#34;from\u0026#34;: { \u0026#34;key_code\u0026#34;: \u0026#34;h\u0026#34;, \u0026#34;modifiers\u0026#34;: { \u0026#34;mandatory\u0026#34;: [\u0026#34;control\u0026#34;], \u0026#34;optional\u0026#34;: [\u0026#34;any\u0026#34;] } }, \u0026#34;to\u0026#34;: [ { \u0026#34;key_code\u0026#34;: \u0026#34;delete_or_backspace\u0026#34; } ] }  The mandatory modifier (control) are removed in output events. The event is not changed if left_control and right_control are not pressed. \u0026quot;optional\u0026quot;: [\u0026quot;any\u0026quot;] allows any modifiers.     Input Output Manipulated     h h Not manipulated   left_control + h delete_or_backspace Manipulated   left_control + left_option + h left_option + delete_or_backspace Manipulated   left_control + left_shift + h left_shift + delete_or_backspace Manipulated    ","excerpt":"from.modifiers is a object which has the following keys.\n   Key Value Required Description …","ref":"/docs/json/complex-modifications-manipulator-definition/from/modifiers/","title":"from.modifiers"},{"body":"Enable Disable caps_lock delay setting from Complex Modification.\n Import Change caps_lock key setting. Enable Disable caps_lock delay.     Note Actually, this setting does not disable the caps lock delay of macOS.\nThis setting puts a wait between caps lock key down and key up event in order to ensure macOS recognize the caps lock event.\n ","excerpt":"Enable Disable caps_lock delay setting from Complex Modification.\n Import Change caps_lock key …","ref":"/docs/help/how-to/disable-caps-lock-delay/","title":"How to disable caps lock delay"},{"body":"Karabiner-Elements modifies following behavior automatically without any configurations:\nShare state of modifier keys with all connected keyboards When you are using multiple keyboards, modifier keys are shared with all keyboards.\nFor example, pressing \u0026ldquo;shift key on keyboard1\u0026rdquo; and \u0026ldquo;space key on keyboard2\u0026rdquo; sends shift-space.\nAdd fn-key combinations Karabiner adds fn-key combinations:\nfn-arrow keys    Key combination Result     fn-up arrow page up   fn-down arrow page down   fn-left arrow home   fn-right arrow end    others    Key combination Result     fn-return enter   fn-delete forward delete    ","excerpt":"Karabiner-Elements modifies following behavior automatically without any configurations:\nShare state …","ref":"/docs/manual/misc/implicit-behavior/","title":"Implicit behavior"},{"body":"It\u0026rsquo;s an issue of macOS that macOS update sometimes does not restore the running process state sufficiently after macOS update.\nPlease follow the instruction to solve the problem.\n Restart macOS once again after macOS update. Reinstall Karabiner-Elements if restart macOS does not solve the problem.  ","excerpt":"It\u0026rsquo;s an issue of macOS that macOS update sometimes does not restore the running process state …","ref":"/docs/help/troubleshooting/stopped-working-after-macos-update/","title":"Karabiner-Elements stopped working after macOS update"},{"body":"Security is one of the most important point of Karabiner-Elements architecture design.\nSeparating process and running them with properly privileges to prevent event leaks.\nProcess Karabiner-Elements restricts the input event handling to karabiner_observer and karabiner_grabber processes.\nThese process are running with root privilege and other process including malicious attacker cannot steal your input events.\nList of process Running with root privilege\n karabiner_observer  Role:  Observe the keyboard hardware events and tell grabber the devices state.     karabiner_grabber  Role:  Grab the keyboard hardware and catch events, modify events then post them.     karabiner_kextd  Role:  Load Karabiner VirtualHIDDevice kernel extension.     Karabiner VirtualHIDDevice kernel extension  Role:  Virtual keyboard and pointing device. The virtual devices deny any requires (sending input events) from non root privileged processes.\nTypically, karabiner_grabber is the only process which can send input events to the virtual devices.      Running with logged in user privilege\n karabiner_console_user_server  Role:  Tell karabiner_grabber starting device grabbing. Execute shell commands which is triggered by karabiner_grabber.     karabiner_session_monitor  Role:  Monitor user login status and tell it to karabiner_grabber.     karabiner_observer (Running with logged in user)  Role:  Tell macOS karabiner_observer will be use Input Monitoring.\nAnd do nothing if the process is running with non root user.     karabiner_grabber (Running with logged in user)  Role:  Tell macOS karabiner_grabber will be use Input Monitoring.\nAnd do nothing if the process is running with non root user.      ","excerpt":"Security is one of the most important point of Karabiner-Elements architecture design.\nSeparating …","ref":"/docs/help/advanced-topics/security/","title":"Security"},{"body":"{ \u0026#34;key_code\u0026#34;: \u0026#34;The name of key_code\u0026#34;, \u0026#34;consumer_key_code\u0026#34;: \u0026#34;The name of consumer_key_code\u0026#34;, \u0026#34;pointing_button\u0026#34;: \u0026#34;The name of pointing_button\u0026#34;, \u0026#34;shell_command\u0026#34;: \u0026#34;shell command\u0026#34;, \u0026#34;select_input_source\u0026#34;: { \u0026#34;language\u0026#34;: \u0026#34;language regex\u0026#34;, \u0026#34;input_source_id\u0026#34;: \u0026#34;input source id regex\u0026#34;, \u0026#34;input_mode_id\u0026#34;: \u0026#34;input mode id regex\u0026#34; }, \u0026#34;set_variable\u0026#34;: { \u0026#34;name\u0026#34;: \u0026#34;variable name\u0026#34;, \u0026#34;value\u0026#34;: \u0026#34;variable value\u0026#34; }, \u0026#34;mouse_key\u0026#34;: mouse_key definition, \u0026#34;modifiers\u0026#34;: [ modifier, modifier, ... ], \u0026#34;lazy\u0026#34;: false, \u0026#34;repeat\u0026#34;: true, \u0026#34;halt\u0026#34;: false, \u0026#34;hold_down_milliseconds\u0026#34;: 0 }  Note The following keys are exclusive. You cannot specify multiple items into one to entry.\n key_code consumer_key_code pointing_button shell_command select_input_source set_variable mouse_key      Name Required Description     key_code Optional Key code which you want to post   consumer_key_code Optional Consumer key code (media key code) which you want to post   pointing_button Optional Pointing button name which you want to post   shell_command Optional Shell command which you want to execute   select_input_source Optional Input source which you want to switch   set_variable Optional A varaible name and value which you want to change   mouse_key Optional A mouse key definition   modifiers Optional Modifiers which are post with the event   lazy Optional Lazy modifier flag   repeat Optional Key repeat flag   halt Optional A flag for to_after_key_up   hold_down_milliseconds Optional Interval of key_down and key_up when these events are sent at the same time    Investigate key names  You can find key_code, consumer_key_code and pointing_button names by EventViewer. You can also confirm names in list. (See \u0026quot;data\u0026quot; in the list.)  Tips You can also specify key_code, consumer_key_code, pointing_button with raw number as follows.\n{ \u0026#34;to\u0026#34;: [ { \u0026#34;key_code\u0026#34;: 41 } ] }   ","excerpt":"{ \u0026#34;key_code\u0026#34;: \u0026#34;The name of key_code\u0026#34;, \u0026#34;consumer_key_code\u0026#34;: \u0026#34;The name of …","ref":"/docs/json/complex-modifications-manipulator-definition/to/","title":"to event definition"},{"body":"select_input_source change the current input source.\nCaution Switching to input sources which have input_mode_id (Chinese, Japanese, Korean, Vietnamese) may be failed due to an macOS issue.\nFor CJKV input sources, sending the input source switch shortcut (e.g., control-space) is better than using select_input_source.\n { \u0026#34;to\u0026#34;: [ { \u0026#34;select_input_source\u0026#34;: { \u0026#34;language\u0026#34;: \u0026#34;language regex\u0026#34;, \u0026#34;input_source_id\u0026#34;: \u0026#34;input source id regex\u0026#34;, \u0026#34;input_mode_id\u0026#34;: \u0026#34;input mode id regex\u0026#34; } } ] }    Name Required Description     language Optional The language regex such as \u0026quot;^en$\u0026quot;, \u0026quot;^fr$\u0026quot;   input_source_id Optional The input source id regex such as \u0026quot;^com\\\\.apple\\\\.keylayout\\\\.US$\u0026quot;   input_mode_id Optional The input mode id regex such as \u0026quot;^com\\\\.apple\\\\.inputmethod\\\\.Japanese\\\\.Hiragana$\u0026quot;    Example Switch to French input source.\n{ \u0026#34;to\u0026#34;: [ { \u0026#34;select_input_source\u0026#34;: { \u0026#34;language\u0026#34;: \u0026#34;^fr$\u0026#34; } } ] } Investigate the input source identifiers You can find the current input source identifiers by EventViewer \u0026gt; Variables tab.\n{ \u0026#34;input_source\u0026#34;: { \u0026#34;input_mode_id\u0026#34;: \u0026#34;com.apple.inputmethod.Japanese\u0026#34;, \u0026#34;input_source_id\u0026#34;: \u0026#34;com.google.inputmethod.Japanese.base\u0026#34;, \u0026#34;language\u0026#34;: \u0026#34;ja\u0026#34; } }    ","excerpt":"select_input_source change the current input source.\nCaution Switching to input sources which have …","ref":"/docs/json/complex-modifications-manipulator-definition/to/select-input-source/","title":"to.select_input_source"},{"body":"Swap ; and : (Equal to swap ; and shift-;)\n[ { \u0026#34;type\u0026#34;: \u0026#34;basic\u0026#34;, \u0026#34;from\u0026#34;: { \u0026#34;key_code\u0026#34;: \u0026#34;semicolon\u0026#34;, \u0026#34;modifiers\u0026#34;: { \u0026#34;mandatory\u0026#34;: [\u0026#34;shift\u0026#34;], \u0026#34;optional\u0026#34;: [\u0026#34;caps_lock\u0026#34;] } }, \u0026#34;to\u0026#34;: [ { \u0026#34;key_code\u0026#34;: \u0026#34;semicolon\u0026#34; } ] }, { \u0026#34;type\u0026#34;: \u0026#34;basic\u0026#34;, \u0026#34;from\u0026#34;: { \u0026#34;key_code\u0026#34;: \u0026#34;semicolon\u0026#34;, \u0026#34;modifiers\u0026#34;: { \u0026#34;optional\u0026#34;: [\u0026#34;caps_lock\u0026#34;] } }, \u0026#34;to\u0026#34;: [ { \u0026#34;key_code\u0026#34;: \u0026#34;semicolon\u0026#34;, \u0026#34;modifiers\u0026#34;: [\u0026#34;left_shift\u0026#34;] } ] } ] Change control-h to delete And change control-option-h to option-delete.\n{ \u0026#34;type\u0026#34;: \u0026#34;basic\u0026#34;, \u0026#34;from\u0026#34;: { \u0026#34;key_code\u0026#34;: \u0026#34;h\u0026#34;, \u0026#34;modifiers\u0026#34;: { \u0026#34;mandatory\u0026#34;: [\u0026#34;control\u0026#34;], \u0026#34;optional\u0026#34;: [\u0026#34;caps_lock\u0026#34;, \u0026#34;option\u0026#34;] } }, \u0026#34;to\u0026#34;: [ { \u0026#34;key_code\u0026#34;: \u0026#34;delete_or_backspace\u0026#34; } ] } Disable command-l on Finder { \u0026#34;type\u0026#34;: \u0026#34;basic\u0026#34;, \u0026#34;from\u0026#34;: { \u0026#34;key_code\u0026#34;: \u0026#34;l\u0026#34;, \u0026#34;modifiers\u0026#34;: { \u0026#34;mandatory\u0026#34;: [\u0026#34;command\u0026#34;], \u0026#34;optional\u0026#34;: [\u0026#34;caps_lock\u0026#34;] } }, \u0026#34;conditions\u0026#34;: [ { \u0026#34;type\u0026#34;: \u0026#34;frontmost_application_if\u0026#34;, \u0026#34;bundle_identifiers\u0026#34;: [\u0026#34;^com\\\\.apple\\\\.finder$\u0026#34;] } ] } Post escape if left_control is pressed alone { \u0026#34;type\u0026#34;: \u0026#34;basic\u0026#34;, \u0026#34;from\u0026#34;: { \u0026#34;key_code\u0026#34;: \u0026#34;left_control\u0026#34;, \u0026#34;modifiers\u0026#34;: { \u0026#34;optional\u0026#34;: [\u0026#34;any\u0026#34;] } }, \u0026#34;to\u0026#34;: [ { \u0026#34;key_code\u0026#34;: \u0026#34;left_control\u0026#34;, \u0026#34;lazy\u0026#34;: true } ], \u0026#34;to_if_alone\u0026#34;: [ { \u0026#34;key_code\u0026#34;: \u0026#34;escape\u0026#34; } ] } Open Alfred 4 if escape is held down { \u0026#34;type\u0026#34;: \u0026#34;basic\u0026#34;, \u0026#34;from\u0026#34;: { \u0026#34;key_code\u0026#34;: \u0026#34;escape\u0026#34;, \u0026#34;modifiers\u0026#34;: { \u0026#34;optional\u0026#34;: [\u0026#34;caps_lock\u0026#34;] } }, \u0026#34;parameters\u0026#34;: { \u0026#34;basic.to_if_alone_timeout_milliseconds\u0026#34;: 250, \u0026#34;basic.to_if_held_down_threshold_milliseconds\u0026#34;: 250 }, \u0026#34;to_if_alone\u0026#34;: [ { \u0026#34;key_code\u0026#34;: \u0026#34;escape\u0026#34; } ], \u0026#34;to_if_held_down\u0026#34;: [ { \u0026#34;shell_command\u0026#34;: \u0026#34;open -a \u0026#39;Alfred 4.app\u0026#39;\u0026#34; } ] } Change right_shift x2 to mission_control [ { \u0026#34;type\u0026#34;: \u0026#34;basic\u0026#34;, \u0026#34;from\u0026#34;: { \u0026#34;key_code\u0026#34;: \u0026#34;right_shift\u0026#34;, \u0026#34;modifiers\u0026#34;: { \u0026#34;optional\u0026#34;: [\u0026#34;any\u0026#34;] } }, \u0026#34;to\u0026#34;: [ { \u0026#34;key_code\u0026#34;: \u0026#34;mission_control\u0026#34; } ], \u0026#34;conditions\u0026#34;: [ { \u0026#34;type\u0026#34;: \u0026#34;variable_if\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;right_shift pressed\u0026#34;, \u0026#34;value\u0026#34;: 1 } ] }, { \u0026#34;type\u0026#34;: \u0026#34;basic\u0026#34;, \u0026#34;from\u0026#34;: { \u0026#34;key_code\u0026#34;: \u0026#34;right_shift\u0026#34;, \u0026#34;modifiers\u0026#34;: { \u0026#34;optional\u0026#34;: [\u0026#34;any\u0026#34;] } }, \u0026#34;to\u0026#34;: [ { \u0026#34;set_variable\u0026#34;: { \u0026#34;name\u0026#34;: \u0026#34;right_shift pressed\u0026#34;, \u0026#34;value\u0026#34;: 1 } }, { \u0026#34;key_code\u0026#34;: \u0026#34;right_shift\u0026#34; } ], \u0026#34;to_delayed_action\u0026#34;: { \u0026#34;to_if_invoked\u0026#34;: [ { \u0026#34;set_variable\u0026#34;: { \u0026#34;name\u0026#34;: \u0026#34;right_shift pressed\u0026#34;, \u0026#34;value\u0026#34;: 0 } } ], \u0026#34;to_if_canceled\u0026#34;: [ { \u0026#34;set_variable\u0026#34;: { \u0026#34;name\u0026#34;: \u0026#34;right_shift pressed\u0026#34;, \u0026#34;value\u0026#34;: 0 } } ] } } ] Change equal+delete to forward_delete if these keys are pressed simultaneously { \u0026#34;type\u0026#34;: \u0026#34;basic\u0026#34;, \u0026#34;from\u0026#34;: { \u0026#34;simultaneous\u0026#34;: [ { \u0026#34;key_code\u0026#34;: \u0026#34;equal_sign\u0026#34; }, { \u0026#34;key_code\u0026#34;: \u0026#34;delete_or_backspace\u0026#34; } ], \u0026#34;modifiers\u0026#34;: { \u0026#34;optional\u0026#34;: [\u0026#34;any\u0026#34;] } }, \u0026#34;to\u0026#34;: [ { \u0026#34;key_code\u0026#34;: \u0026#34;delete_forward\u0026#34; } ] } ","excerpt":"Swap ; and : (Equal to swap ; and shift-;)\n[ { \u0026#34;type\u0026#34;: \u0026#34;basic\u0026#34;, \u0026#34;from\u0026#34;: { …","ref":"/docs/json/typical-complex-modifications-examples/","title":"Typical complex_modifications examples"},{"body":"Karabiner-Elements provides built-in uninstaller.\nUse the uninstaller to remove Karabiner-Elements from your system.\nYou can launch the uninstaller from \u0026ldquo;Uninstall Karabiner-Elements\u0026rdquo; button on Misc tab.   Advanced topic If you don\u0026rsquo;t want to use above GUI, you can also uninstall Karabiner-Elements from command line.\nsudo \u0026#39;/Library/Application Support/org.pqrs/Karabiner-Elements/uninstall_core.sh\u0026#39; (Administrator password is required to run the above command.)\n ","excerpt":"Karabiner-Elements provides built-in uninstaller.\nUse the uninstaller to remove Karabiner-Elements …","ref":"/docs/manual/operation/uninstall/","title":"Uninstall"},{"body":"Karabiner-Elements provides more complex event modifications.\nThese rules change keys by conditions.\nExamples  Modifier flags + key to keys:  Change control-m to return key. Change control-h to delete key.   Key to modifier flags + keys:  Change caps lock to command+control+option+shift key   Post other key events when a key pressed alone:  Post escape key when you press left control key alone.   Change keys in specific apps:  Change left command key to left control key in virtual machines.   Execute shell command:  Open Activity Monitor by right shift+a.     You can import predefined rules from the internet or make your own rules.\nStep 1 Open Complex Modifications tab and press Add rule button, then press Import more rules from the internet button.\nOfficial rules site will be open using your default web browser.\n     Step 2 Press Import button in the page.\nA confirmation dialog is shown. Press Allow button.\n       Step 3 Karabiner-Elements is shown again. Press Import button, then new rules are imported.\n  Step 4 Press Enable button.\n  Step 5 New rule is enabled.\nConfirm the result using Karabiner-EventViewer.\n  ","excerpt":"Karabiner-Elements provides more complex event modifications.\nThese rules change keys by conditions. …","ref":"/docs/manual/configuration/configure-complex-modifications/","title":"Use more complex rules"},{"body":"Karabiner-Elements does not provide virtual modifiers, however you can make your own flag similar to virtual modifier using variables.\nExample The following json change keypad_1 to virtual modifier.\n Change keypad_1 to virtual modifier (my_modifier_1). Change keypad_1 + a to mission_control. Change keypad_1 + s to launchpad.  [ { \u0026#34;type\u0026#34;: \u0026#34;basic\u0026#34;, \u0026#34;from\u0026#34;: { \u0026#34;key_code\u0026#34;: \u0026#34;keypad_1\u0026#34;, \u0026#34;modifiers\u0026#34;: { \u0026#34;mandatory\u0026#34;: [], \u0026#34;optional\u0026#34;: [\u0026#34;any\u0026#34;] } }, \u0026#34;to\u0026#34;: [ { \u0026#34;set_variable\u0026#34;: { \u0026#34;name\u0026#34;: \u0026#34;my_modifier_1\u0026#34;, \u0026#34;value\u0026#34;: 1 } } ], \u0026#34;to_after_key_up\u0026#34;: [ { \u0026#34;set_variable\u0026#34;: { \u0026#34;name\u0026#34;: \u0026#34;my_modifier_1\u0026#34;, \u0026#34;value\u0026#34;: 0 } } ] }, { \u0026#34;type\u0026#34;: \u0026#34;basic\u0026#34;, \u0026#34;from\u0026#34;: { \u0026#34;key_code\u0026#34;: \u0026#34;a\u0026#34;, \u0026#34;modifiers\u0026#34;: { \u0026#34;mandatory\u0026#34;: [], \u0026#34;optional\u0026#34;: [\u0026#34;any\u0026#34;] } }, \u0026#34;to\u0026#34;: [ { \u0026#34;key_code\u0026#34;: \u0026#34;mission_control\u0026#34; } ], \u0026#34;conditions\u0026#34;: [ { \u0026#34;type\u0026#34;: \u0026#34;variable_if\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;my_modifier_1\u0026#34;, \u0026#34;value\u0026#34;: 1 } ] }, { \u0026#34;type\u0026#34;: \u0026#34;basic\u0026#34;, \u0026#34;from\u0026#34;: { \u0026#34;key_code\u0026#34;: \u0026#34;s\u0026#34;, \u0026#34;modifiers\u0026#34;: { \u0026#34;mandatory\u0026#34;: [], \u0026#34;optional\u0026#34;: [\u0026#34;any\u0026#34;] } }, \u0026#34;to\u0026#34;: [ { \u0026#34;key_code\u0026#34;: \u0026#34;launchpad\u0026#34; } ], \u0026#34;conditions\u0026#34;: [ { \u0026#34;type\u0026#34;: \u0026#34;variable_if\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;my_modifier_1\u0026#34;, \u0026#34;value\u0026#34;: 1 } ] } ] ","excerpt":"Karabiner-Elements does not provide virtual modifiers, however you can make your own flag similar to …","ref":"/docs/json/extra/virtual-modifier/","title":"Virtual modifier"},{"body":"You can check for updates from \u0026ldquo;Misc\u0026rdquo; tab.\n  Tip If you want to use the latest beta version, use \u0026ldquo;Check for beta updates\u0026rdquo; button.\n   ","excerpt":"You can check for updates from \u0026ldquo;Misc\u0026rdquo; tab.\n  Tip If you want to use the latest beta …","ref":"/docs/manual/operation/check-for-updates/","title":"Check for updates"},{"body":"Choose devices which Karabiner-Elements modifies events on Devices tab.\nTip Mice are disabled by default.\nYou have to enable them if you want to change the mouse buttons in Karabiner-Elements.    ","excerpt":"Choose devices which Karabiner-Elements modifies events on Devices tab.\nTip Mice are disabled by …","ref":"/docs/manual/configuration/configure-devices/","title":"Choose devices"},{"body":"The manipulators are evaluated from the top to the bottom and the input event is manipulated only the first matched manipulator.\nIn other words, if there are multiple manipulators which change the same key, the manipulator placed at the top is applied and other manipulators are ignored.\nSimple Modifications and Complex Modifications Simple Modifications and Complex Modifications are independent.\nThus, Simple Modifications does not affect above priority.\nKarabiner-Elements changes keys by Simple Modifications, and then changes them by Complex Modifications.\nAbout input event modification chaining.\nExample If there are the following manipulators, right shift key will be right command + right option.\n Simple Modifications  Change right shift to right command   Complex Modifications  Change right command to right command + right option     ","excerpt":"The manipulators are evaluated from the top to the bottom and the input event is manipulated only …","ref":"/docs/json/complex-modifications-manipulator-evaluation-priority/","title":"complex_modifications manipulator evaluation priority"},{"body":"simultaneous manipulates keys which are pressed simultaneously in 50 milliseconds.\nExample This json defines manipulator which changes a+s+d to mission_control.\n{ \u0026#34;type\u0026#34;: \u0026#34;basic\u0026#34;, \u0026#34;from\u0026#34;: { \u0026#34;simultaneous\u0026#34;: [ { \u0026#34;key_code\u0026#34;: \u0026#34;a\u0026#34; }, { \u0026#34;key_code\u0026#34;: \u0026#34;s\u0026#34; }, { \u0026#34;key_code\u0026#34;: \u0026#34;d\u0026#34; } ], \u0026#34;modifiers\u0026#34;: { \u0026#34;optional\u0026#34;: [\u0026#34;any\u0026#34;] } }, \u0026#34;to\u0026#34;: [ { \u0026#34;key_code\u0026#34;: \u0026#34;mission_control\u0026#34; } ] }  Note There are some cases simultaneous does not modify events.\n simultaneous does not modify events if any from events are released before all from events are pressed. simultaneous does not modify events if from events are interrupted by another key_down event.   Manipulated input #1  Input:  a key_down s key_down d key_down   Output:  mission_control    Manipulated input #2  Input:  s key_down a key_down d key_down   Output:  mission_control    Not manipulated input #1 a is released before all input events are pressed.\n Input:  a key_down s key_down a key_up d key_down   Output:  a key_down s key_down a key_up d key_down    Not manipulated input #2 Another key (f) is pressed before all input events are pressed.\n Input:  a key_down s key_down f key_down d key_down   Output:  a key_down s key_down f key_down d key_down    About key_up The key_up event is posted when you release any from events.\nFor example, changing tab+q to mission_control works as follows.\n   Input Output     tab key_down \u0026mdash;   q key_down mission_control key_down   tab key_up mission_control key_up   q key_up \u0026mdash;    Change threshold milliseconds You can adjust threshold on Preferences \u0026gt; Complex Modifications \u0026gt; Parameters.\n  It is same as adjusting basic.simultaneous_threshold_milliseconds parameter in json.\n","excerpt":"simultaneous manipulates keys which are pressed simultaneously in 50 milliseconds.\nExample This json …","ref":"/docs/json/complex-modifications-manipulator-definition/from/simultaneous/","title":"from.simultaneous"},{"body":"Karabiner-Elements does not provide a feature to adjust key repeat rate.\nUse System Preferences \u0026gt; Keyboard.\n  You can also adjust the key repeat rate using defaults write command. https://apple.stackexchange.com/questions/10467/how-to-increase-keyboard-key-repeat-rate-on-os-x\n","excerpt":"Karabiner-Elements does not provide a feature to adjust key repeat rate.\nUse System Preferences \u0026gt; …","ref":"/docs/help/how-to/key-repeat/","title":"How to adjust the key repeat rate"},{"body":"Karabiner-Elements treats input events by the following order:\n Catch events from hardware. Apply Simple Modifications. Apply Complex Modifications. Apply Function Keys Modifications. (change f1\u0026hellip;f12 keys to media controls) Post events to applications via a virtual keyboard.  Note System modifier keys configuration in System Preferences \u0026gt; Keyboard is ignored when you use Karabiner-Elements.\nChange modifier keys in Karabiner-Elements\u0026rsquo;s Simple Modifications.\n ","excerpt":"Karabiner-Elements treats input events by the following order:\n Catch events from hardware. Apply …","ref":"/docs/manual/misc/event-modification-chaining/","title":"Input event modification chaining"},{"body":"Change an event if/unless the event is from specified type keyboard.\n{ \u0026#34;type\u0026#34;: \u0026#34;keyboard_type_if\u0026#34;, \u0026#34;keyboard_types\u0026#34;: [\u0026#34;ansi\u0026#34;, \u0026#34;iso\u0026#34;] }  Tip It\u0026rsquo;s useful for supporting \u0026ldquo;change control-[ to escape\u0026rdquo; with all keyboard types. (example json)\nSome characters have different key code for each keyboard types.\n(e.g., [ is open_bracket on ansi and iso, close_bracket on jis.)\n    Name Required Description     type Required \u0026quot;keyboard_type_if\u0026quot; or \u0026quot;keyboard_type_unless\u0026quot;   keyboard_types Required An array of \u0026quot;ansi\u0026quot;, \u0026quot;iso\u0026quot; or \u0026quot;jis\u0026quot;   description Optional A human-readable comment    Multiple keyboard types keyboard_types are joined by \u0026ldquo;or\u0026rdquo;.\nThe following condition is matched if the keyboard type is \u0026ldquo;ansi\u0026rdquo; or \u0026ldquo;iso\u0026rdquo;.\n{ \u0026#34;type\u0026#34;: \u0026#34;keyboard_type_if\u0026#34;, \u0026#34;keyboard_types\u0026#34;: [\u0026#34;ansi\u0026#34;, \u0026#34;iso\u0026#34;] } ","excerpt":"Change an event if/unless the event is from specified type keyboard.\n{ \u0026#34;type\u0026#34;: …","ref":"/docs/json/complex-modifications-manipulator-definition/conditions/keyboard-type/","title":"keyboard_type_if, keyboard_type_unless"},{"body":"set_variable defines and updates the variable value.\nTip set_variable is designed to use with variable_if and variable_unless conditions.  { \u0026#34;to\u0026#34;: [ { \u0026#34;set_variable\u0026#34;: { \u0026#34;name\u0026#34;: \u0026#34;variable name\u0026#34;, \u0026#34;value\u0026#34;: \u0026#34;variable value\u0026#34; } } ] }    Name Required Description     name Required Target variable name.   value Required Target variable value.    Confirm the current variable values You can see the current variable values by EventViewer \u0026gt; Variables.\n  ","excerpt":"set_variable defines and updates the variable value.\nTip set_variable is designed to use with …","ref":"/docs/json/complex-modifications-manipulator-definition/to/set-variable/","title":"to.set_variable"},{"body":"to_if_alone posts events when the from key is pressed alone.\nThe events are posted at the from key is released.\nExample The following json changes left_control to sending escape when left_control is pressed alone.\n{ \u0026#34;type\u0026#34;: \u0026#34;basic\u0026#34;, \u0026#34;from\u0026#34;: { \u0026#34;key_code\u0026#34;: \u0026#34;left_control\u0026#34;, \u0026#34;modifiers\u0026#34;: { \u0026#34;optional\u0026#34;: [\u0026#34;any\u0026#34;] } }, \u0026#34;to\u0026#34;: [ { \u0026#34;key_code\u0026#34;: \u0026#34;left_control\u0026#34;, \u0026#34;lazy\u0026#34;: true } ], \u0026#34;to_if_alone\u0026#34;: [ { \u0026#34;key_code\u0026#34;: \u0026#34;escape\u0026#34; } ] } About cancellation to_if_alone is canceled if other events (keys, buttons or scroll wheel) is happen while the from key is pressed down.\nThe cancellation also happens when you press the from key long. (The default timeout is 1000 milliseconds.)\nYou can adjust the timeout milliseconds by parameters \u0026gt; basic.to_if_alone_timeout_milliseconds.\nThe following example sets the timeout 500 milliseconds.\n{ \u0026#34;from\u0026#34;: ..., \u0026#34;to\u0026#34;: ..., \u0026#34;to_if_alone\u0026#34;: [ { \u0026#34;key_code\u0026#34;: \u0026#34;escape\u0026#34; } ], \u0026#34;parameters\u0026#34;: { \u0026#34;basic.to_if_alone_timeout_milliseconds\u0026#34;: 500 }, \u0026#34;type\u0026#34;: \u0026#34;basic\u0026#34; } About keyboard repeat to_if_alone posts both key_down and key_up events at the same time.\nThus, you cannot use key repeat for to_if_alone events.\n","excerpt":"to_if_alone posts events when the from key is pressed alone.\nThe events are posted at the from key …","ref":"/docs/json/complex-modifications-manipulator-definition/to-if-alone/","title":"to_if_alone"},{"body":"It\u0026rsquo;s an issue of macOS, and unfortunately, Karabiner-Elements cannot avoid this issue.\nInstead, please change fn+number keys to function keys in Karabiner-Elements configuration.\n Import Map fn + number keys to function keys Enable Map fn + number keys to their corresponding function keys. You can use f1-f12 keys by fn+number keys.     Note If you are using \u0026ldquo;Use all F1, F2, etc. keys as standard function keys.\u0026quot;, enable Map fn + number keys to their corresponding media control keys instead.  Detail of the problem The fn key events are ignored by Touch Bar since the following facts.\n Touch Bar accepts the fn key event only from the build-in keyboard. The fn key events are sent from Karabiner\u0026rsquo;s virtual keyboard when Karabiner-Elements is running.  Unfortunately, posting input events via own virtual keyboard is the only way to accomplish the stable input event modification.\nIn other words, we cannot post the fn key event through the built-in keyboard if we want to change key events stably.\n ","excerpt":"It\u0026rsquo;s an issue of macOS, and unfortunately, Karabiner-Elements cannot avoid this issue. …","ref":"/docs/help/troubleshooting/touch-bar-function-keys/","title":"Touch Bar does not change to f1-f12 when I press the fn key"},{"body":"It\u0026rsquo;s an issue of macOS, and unfortunately, Karabiner-Elements cannot avoid this issue.\nInstead, please change fn+escape to eject and use control+fn+escape (== control+eject) shortcut.\n Import Change escape key. Enable Change fn+escape to eject.\nYou can use control+fn+escape as control+eject.     ","excerpt":"It\u0026rsquo;s an issue of macOS, and unfortunately, Karabiner-Elements cannot avoid this issue. …","ref":"/docs/help/troubleshooting/control-eject/","title":"Control-eject shortcut does not work when Karabiner-Elements is running"},{"body":"You can disable MacBook built-in keyboard if external keyboards are connected.\nThis feature is useful when you put the external keybaord on top of the built-in keyboard.\nChoose your external keyboards on Deviecs \u0026gt; Advanced.\n  ","excerpt":"You can disable MacBook built-in keyboard if external keyboards are connected.\nThis feature is …","ref":"/docs/manual/configuration/disable-built-in-keyboard/","title":"Disable the built-in keyboard when external keyboard is connected"},{"body":"simultaneous_options adjust the simultaneous behavior.\n   Key Value Description     detect_key_down_uninterruptedly true or false Specify whether key_down detection is interrupted with unrelated events   key_down_order insensitive, strict or strict_inverse Restriction of key_down order   key_up_order insensitive, strict or strict_inverse Restriction of key_up order   key_up_when any or all When key_up events are posted   to_after_key_up An array of to event definitions Events will be posted when all from events are released    detect_key_down_uninterruptedly If detect_key_down_uninterruptedly is true, Karabiner-Elements changes simultaneous events even if unrelated key down event exists between target events.\nFor example, when escape+3 -\u0026gt; mission_control, escape,1,3 will be mission_control,1 if detect_key_down_uninterruptedly is true.\nThe default value is false.\nkey_down_order simultaneous checks the order of key_down events if key_down_order is specified and is not insensitive.\nFor example, this definition manipulates tab,q to mission_control and does not manipulate q,tab events.\n{ \u0026#34;type\u0026#34;: \u0026#34;basic\u0026#34;, \u0026#34;from\u0026#34;: { \u0026#34;simultaneous\u0026#34;: [ { \u0026#34;key_code\u0026#34;: \u0026#34;tab\u0026#34; }, { \u0026#34;key_code\u0026#34;: \u0026#34;q\u0026#34; } ], \u0026#34;simultaneous_options\u0026#34;: { \u0026#34;key_down_order\u0026#34;: \u0026#34;strict\u0026#34; }, \u0026#34;modifiers\u0026#34;: { \u0026#34;optional\u0026#34;: [\u0026#34;any\u0026#34;] } }, \u0026#34;to\u0026#34;: [ { \u0026#34;key_code\u0026#34;: \u0026#34;mission_control\u0026#34; } ] } key_up_order simultaneous checks the order of key_up events if key_up_order is specified and is not insensitive.\nTip key_up_order is ignored if simultaneous_threshold_milliseconds is reached.\nYou should set a large value to simultaneous_threshold_milliseconds when you use key_up_order.\n For example, this definition manipulates tab,q to mission_control if the tab key is released before the q key within 500 milliseconds.\n   Input Output     tab \u0026amp; q key_down \u0026mdash;   tab key_up mission_control key_down, mission_control key_up   q key_up \u0026mdash;    Note Events will be posted just before the last from event\u0026rsquo;s key_up.  { \u0026#34;type\u0026#34;: \u0026#34;basic\u0026#34;, \u0026#34;parameters\u0026#34;: { \u0026#34;basic.simultaneous_threshold_milliseconds\u0026#34;: 500 }, \u0026#34;from\u0026#34;: { \u0026#34;simultaneous\u0026#34;: [ { \u0026#34;key_code\u0026#34;: \u0026#34;tab\u0026#34; }, { \u0026#34;key_code\u0026#34;: \u0026#34;q\u0026#34; } ], \u0026#34;simultaneous_options\u0026#34;: { \u0026#34;key_up_order\u0026#34;: \u0026#34;strict\u0026#34; }, \u0026#34;modifiers\u0026#34;: { \u0026#34;optional\u0026#34;: [\u0026#34;any\u0026#34;] } }, \u0026#34;to\u0026#34;: [ { \u0026#34;key_code\u0026#34;: \u0026#34;mission_control\u0026#34; } ] } key_up_when Specify when key_up events are posted.\n   Value Description     any Post key_up events when any key is released   all Post key_up events when all keys are released    to_after_key_up to_after_key_up will be posted when all from events are released.\nThis feature is typically used to clear mode flag variables when all from events are released.\nExample:\n Mouse Keys Mode v4  json json generator Import    ","excerpt":"simultaneous_options adjust the simultaneous behavior.\n   Key Value Description …","ref":"/docs/json/complex-modifications-manipulator-definition/from/simultaneous-options/","title":"from.simultaneous_options"},{"body":"You can show keyboard and mouse events by using EventViewer.\n Open Karabiner-EventViewer from Launchpad.    Input events will be shown when you type keyboard on EventViewer or press pointing buttons on Mouse Area.     ","excerpt":"You can show keyboard and mouse events by using EventViewer.\n Open Karabiner-EventViewer from …","ref":"/docs/manual/operation/eventviewer/","title":"How to confirm the result of configuration (EventViewer)"},{"body":"Change an event if/unless the current input source is the specified value.\n{ \u0026#34;type\u0026#34;: \u0026#34;input_source_if\u0026#34;, \u0026#34;input_sources\u0026#34;: [ { \u0026#34;language\u0026#34;: \u0026#34;language regex\u0026#34;, \u0026#34;input_source_id\u0026#34;: \u0026#34;input source id regex\u0026#34;, \u0026#34;input_mode_id\u0026#34;: \u0026#34;input mode id regex\u0026#34; }, { \u0026#34;language\u0026#34;: \u0026#34;language regex\u0026#34;, \u0026#34;input_source_id\u0026#34;: \u0026#34;input source id regex\u0026#34;, \u0026#34;input_mode_id\u0026#34;: \u0026#34;input mode id regex\u0026#34; }, ... ] }    Name Required Description     type Required \u0026quot;input_source_if\u0026quot; or \u0026quot;input_source_unless\u0026quot;   input_sources Required Target input source definitions   description Optional A human-readable comment    input_sources input_sources is an array of objects.\n   Name Required Description     language Optional The language regex such as \u0026quot;^en$\u0026quot;, \u0026quot;^ja$\u0026quot;   input_source_id Optional The input source id regex such as \u0026quot;^com\\\\.apple\\\\.keylayout\\\\.US$\u0026quot;   input_mode_id Optional The input mode id regex such as \u0026quot;^com\\\\.apple\\\\.inputmethod\\\\.Japanese\\\\.Hiragana$\u0026quot;    Multiple identifiers If you specify multiple identifiers (language, input_source_id or input_mode_id), these are joined by \u0026ldquo;and\u0026rdquo;.\nThe following condition is matched if language is \u0026ldquo;ja\u0026rdquo; and input_mode_id is \u0026ldquo;com.apple.inputmethod.Japanese.Hiragana\u0026rdquo;.\n{ \u0026#34;type\u0026#34;: \u0026#34;input_source_if\u0026#34;, \u0026#34;input_sources\u0026#34;: [ { \u0026#34;language\u0026#34;: \u0026#34;^ja$\u0026#34;, \u0026#34;input_mode_id\u0026#34;: \u0026#34;^com\\\\.apple\\\\.inputmethod\\\\.Japanese\\\\.Hiragana$\u0026#34; } ] } Multiple entries If you specify multiple entries at input_sources, conditions are joined by \u0026ldquo;or\u0026rdquo;.\nThe following condition is matched if language is \u0026ldquo;en\u0026rdquo; or \u0026ldquo;ja\u0026rdquo;.\n{ \u0026#34;type\u0026#34;: \u0026#34;input_source_if\u0026#34;, \u0026#34;input_sources\u0026#34;: [ { \u0026#34;language\u0026#34;: \u0026#34;^en$\u0026#34; }, { \u0026#34;language\u0026#34;: \u0026#34;^ja$\u0026#34; } ] } Investigate the input source identifiers You can find the current input source identifiers by EventViewer \u0026gt; Variables tab.\n{ \u0026#34;input_source\u0026#34;: { \u0026#34;input_mode_id\u0026#34;: \u0026#34;com.apple.inputmethod.Japanese\u0026#34;, \u0026#34;input_source_id\u0026#34;: \u0026#34;com.google.inputmethod.Japanese.base\u0026#34;, \u0026#34;language\u0026#34;: \u0026#34;ja\u0026#34; } }    ","excerpt":"Change an event if/unless the current input source is the specified value.\n{ \u0026#34;type\u0026#34;: …","ref":"/docs/json/complex-modifications-manipulator-definition/conditions/input-source/","title":"input_source_if, input_source_unless"},{"body":" Note Karabiner-Elements does not allow you including comments (// ... or /* ... */) in any json files.  karabiner.json { \u0026#34;global\u0026#34;: { \u0026#34;check_for_updates_on_startup\u0026#34;: true, \u0026#34;show_in_menu_bar\u0026#34;: true, \u0026#34;show_profile_name_in_menu_bar\u0026#34;: false }, \u0026#34;profiles\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;Profile name\u0026#34;, \u0026#34;selected\u0026#34;: true, \u0026#34;simple_modifications\u0026#34;: [ ... ], \u0026#34;fn_function_keys\u0026#34;: [ ... ], \u0026#34;complex_modifications\u0026#34;: { \u0026#34;parameters\u0026#34;: { ... }, \u0026#34;rules\u0026#34;: [ ... ] }, \u0026#34;virtual_hid_keyboard\u0026#34;: { \u0026#34;keyboard_type\u0026#34;: \u0026#34;ansi\u0026#34;, \u0026#34;caps_lock_delay_milliseconds\u0026#34;: 0 }, \u0026#34;devices\u0026#34;: [ ... ], \u0026#34;parameters\u0026#34;: { ... } }, { \u0026#34;name\u0026#34;: \u0026#34;Profile name\u0026#34;, \u0026#34;selected\u0026#34;: false, ... }, ... ] } complex_modifications in karabiner.json \u0026gt; profiles { \u0026#34;complex_modifications\u0026#34;: { \u0026#34;parameters\u0026#34;: { ... }, \u0026#34;rules\u0026#34;: [ { \u0026#34;description\u0026#34;: \u0026#34;This description is shown in Preferences.\u0026#34;, \u0026#34;manipulators\u0026#34;: [ { \u0026#34;type\u0026#34;: \u0026#34;basic\u0026#34;, \u0026#34;from\u0026#34;: from event definition, \u0026#34;to\u0026#34;: [ to event definition, to event definition, ... ], \u0026#34;to_if_alone\u0026#34;: [ to event definition, to event definition, ... ], \u0026#34;to_if_held_down\u0026#34;: [ to event definition, to event definition, ... ], \u0026#34;to_after_key_up\u0026#34;: [ to event definition, to event definition, ... ], \u0026#34;to_delayed_action\u0026#34;: { \u0026#34;to_if_invoked\u0026#34;: [ to event definition, to event definition, ... ], \u0026#34;to_if_canceled\u0026#34;: [ to event definition, to event definition, ... ] }, \u0026#34;conditions\u0026#34;: [ condition definition, condition definition, ... ], \u0026#34;parameters\u0026#34;: { ... }, \u0026#34;description\u0026#34;: \u0026#34;Optional description for human\u0026#34; }, { \u0026#34;type\u0026#34;: \u0026#34;basic\u0026#34;, ... }, ... ] }, { \u0026#34;description\u0026#34;: \u0026#34;...\u0026#34;, \u0026#34;manipulators\u0026#34;: [ ... ] }, ... ] } } ","excerpt":"Note Karabiner-Elements does not allow you including comments (// ... or /* ... */) in any json …","ref":"/docs/json/root-data-structure/","title":"karabiner.json data structure"},{"body":"Karabiner-MultitouchExtension allows you to change keys only when your finger is on the trackpad.\nNote Karabiner-MultitouchExtension is available since Karabiner-Elements 12.6.9  Related Complex Modifications examples  Multitouch Vi Mode Multitouch Diamond Cursor Multitouch Mouse Buttons ThumbSense  MultitouchExtension usage  Open MultitouchExtension app from Preferences \u0026gt; Misc.    Enable \u0026ldquo;Start at login\u0026rdquo; on MultitouchExtension Preferences.     Tip If you hid Karabiner-MultitouchExtension icon in Dock, press \u0026ldquo;Open MultitouchExtension app\u0026rdquo; button on Preferences \u0026gt; Misc to open Karabiner-MultitouchExtension Preferences.  How to integrate MultitouchExtension to your complex modifications See karabiner.json reference manual\n","excerpt":"Karabiner-MultitouchExtension allows you to change keys only when your finger is on the trackpad. …","ref":"/docs/manual/misc/multitouch-extension/","title":"MultitouchExtension"},{"body":"Move mouse pointer and scroll by mouse_key.\n{ \u0026#34;to\u0026#34;: [ { \u0026#34;mouse_key\u0026#34;: { \u0026#34;x\u0026#34;: speed, \u0026#34;y\u0026#34;: speed, \u0026#34;vertical_wheel\u0026#34;: speed, \u0026#34;horizontal_wheel\u0026#34;: speed, \u0026#34;speed_multiplier\u0026#34;: 1.0 } } ] }    Name Required Description     x Optional Move left (x \u0026lt; 0) or right (x \u0026gt; 0)   y Optional Move up (y \u0026lt; 0) or down (y \u0026gt; 0)   vertical_wheel Optional Scroll up (vertical_wheel \u0026lt; 0) or down (vertical_wheel \u0026gt; 0)   horizontal_wheel Optional Scroll left (horizontal_wheel \u0026gt; 0) or right (horizontal_wheel \u0026lt; 0)   speed_multiplier Optional Multiply mouse keys speed while this key is hold down    Note Speed and scroll direction depend on System Preferences \u0026gt; Mouse configuration.  Examples     json     Move left { \u0026quot;mouse_key\u0026quot;: { \u0026quot;x\u0026quot;: -1536 } }   Move right { \u0026quot;mouse_key\u0026quot;: { \u0026quot;x\u0026quot;: 1536 } }   Move up { \u0026quot;mouse_key\u0026quot;: { \u0026quot;y\u0026quot;: -1536 } }   Move down { \u0026quot;mouse_key\u0026quot;: { \u0026quot;y\u0026quot;: 1536 } }   Scroll left { \u0026quot;mouse_key\u0026quot;: { \u0026quot;horizontal_wheel\u0026quot;: 32 } }   Scroll right { \u0026quot;mouse_key\u0026quot;: { \u0026quot;horizontal_wheel\u0026quot;: -32 } }   Scroll up { \u0026quot;mouse_key\u0026quot;: { \u0026quot;vertical_wheel\u0026quot;: -32 } }   Scroll down { \u0026quot;mouse_key\u0026quot;: { \u0026quot;vertical_wheel\u0026quot;: 32 } }    Complete json examples  Mouse keys (simple) Mouse Keys Mode v4  ","excerpt":"Move mouse pointer and scroll by mouse_key.\n{ \u0026#34;to\u0026#34;: [ { \u0026#34;mouse_key\u0026#34;: { \u0026#34;x\u0026#34;: …","ref":"/docs/json/complex-modifications-manipulator-definition/to/mouse-key/","title":"to.mouse_key"},{"body":"to_if_held_down posts events when the from key is held down.\nNote If to events are specified, key_up event of to is sent before to_if_held_down events are posted.  Example The following json changes the escape key to open Alfred when the escape key is held down.\n{ \u0026#34;type\u0026#34;: \u0026#34;basic\u0026#34;, \u0026#34;from\u0026#34;: { \u0026#34;key_code\u0026#34;: \u0026#34;escape\u0026#34;, \u0026#34;modifiers\u0026#34;: { \u0026#34;optional\u0026#34;: [\u0026#34;caps_lock\u0026#34;] } }, \u0026#34;parameters\u0026#34;: { \u0026#34;basic.to_if_alone_timeout_milliseconds\u0026#34;: 250, \u0026#34;basic.to_if_held_down_threshold_milliseconds\u0026#34;: 250 }, \u0026#34;to_if_alone\u0026#34;: [ { \u0026#34;key_code\u0026#34;: \u0026#34;escape\u0026#34; } ], \u0026#34;to_if_held_down\u0026#34;: [ { \u0026#34;shell_command\u0026#34;: \u0026#34;open -a \u0026#39;Alfred 4.app\u0026#39;\u0026#34; } ] } Parameter You can adjust the threshold of holding down periods by parameters \u0026gt; basic.to_if_held_down_threshold_milliseconds like the above example.\n","excerpt":"to_if_held_down posts events when the from key is held down.\nNote If to events are specified, key_up …","ref":"/docs/json/complex-modifications-manipulator-definition/to-if-held-down/","title":"to_if_held_down"},{"body":"If the following error message is appeared in log, your home directory owner ship is not valid.\n[warning] [grabber] /Users/.../karabiner.json is not owned by a valid user. The cause is that you are using an external storage and locating your home directory into the volume.\nYou have to enable ownership on the external volume by the following command in Terminal.app.\nsudo diskutil enableOwnership disk99999s99999 (Replace disk99999s99999 with your disk identifier which you can find by diskutil list command.)\n","excerpt":"If the following error message is appeared in log, your home directory owner ship is not valid. …","ref":"/docs/help/troubleshooting/json-owner-is-invalid/","title":"\"karabiner.json is not owned by a valid user\" error message in log"},{"body":"Karabiner-Elements provides a command line interface which provides the following functions.\n Switch a profile by name. Show current profile name. Show all profile names. Set variables which are used in complex modifications. Copy the current profile to system default profile. (Administrator privilege is required.) Remove the system default profile. (Administrator privilege is required.) Lint complex_modifications.json. Display version.  Usage Show help Run the following command in terminal.\n\u0026#39;/Library/Application Support/org.pqrs/Karabiner-Elements/bin/karabiner_cli\u0026#39; Result:\nA command line utility of Karabiner-Elements. Usage: karabiner_cli [OPTION...] --select-profile arg Select a profile by name. --show-current-profile-name Show current profile name --list-profile-names Show all profile names --set-variables arg Json string: {[key: string]: number} --copy-current-profile-to-system-default-profile Copy the current profile to system default profile. --remove-system-default-profile Remove the system default profile. --lint-complex-modifications complex_modifications.json Check complex_modifications.json --version Displays version. --version-number Displays version_number. --help Print help. Examples: karabiner_cli --select-profile \u0026#39;Default profile\u0026#39; karabiner_cli --show-current-profile-name karabiner_cli --list-profile-names karabiner_cli --set-variables \u0026#39;{\u0026#34;cli_flag1\u0026#34;:1, \u0026#34;cli_flag2\u0026#34;:2}\u0026#39;  Examples Switch profile Run the following command in terminal.\n\u0026#39;/Library/Application Support/org.pqrs/Karabiner-Elements/bin/karabiner_cli\u0026#39; --select-profile \u0026#39;Default profile\u0026#39; Show current profile name Run the following command in terminal.\n\u0026#39;/Library/Application Support/org.pqrs/Karabiner-Elements/bin/karabiner_cli\u0026#39; --show-current-profile-name Show all profile names \u0026#39;/Library/Application Support/org.pqrs/Karabiner-Elements/bin/karabiner_cli\u0026#39; --list-profile-names ","excerpt":"Karabiner-Elements provides a command line interface which provides the following functions.\n Switch …","ref":"/docs/manual/misc/command-line-interface/","title":"Command line interface"},{"body":"\u0026#34;manipulators\u0026#34;: [ { \u0026#34;type\u0026#34;: \u0026#34;basic\u0026#34;, \u0026#34;from\u0026#34;: {...}, \u0026#34;to\u0026#34;: [...], \u0026#34;to_if_alone\u0026#34;: [...], \u0026#34;to_if_held_down\u0026#34;: [...], \u0026#34;to_after_key_up\u0026#34;: [...], \u0026#34;to_delayed_action\u0026#34;: { \u0026#34;to_if_invoked\u0026#34;: [...], \u0026#34;to_if_canceled\u0026#34;: [...], }, \u0026#34;conditions\u0026#34;: [...], \u0026#34;parameters\u0026#34;: {...}, \u0026#34;description\u0026#34;: \u0026#34;Optional description for human\u0026#34; }, ... ]    Name Required Description     type Required \u0026quot;basic\u0026quot; is specified   from Required The name of key code, consumer key code or pointing button which you want to change   to Optional Events which are sent when you press from key   to_if_alone Optional Events which are sent when you press from key alone   to_if_held_down Optional Events which are sent when you hold down from key   to_after_key_up Optional Events which are sent after you release from key   to_delayed_action Optional Events which are sent after 500 milliseconds at you press from key   conditions Optional Manipulator is applied only if condition is matched (e.g., the frontmost application)   parameters Optional Override parameters such as to_if_alone_timeout_milliseconds   description Optional A human-readable comment    Detail  from event definition to event definition to_if_alone to_if_held_down to_after_key_up to_delayed_action conditions  Other manipulators Manipulators which type is not \u0026quot;basic\u0026quot;.\n mouse_motion_to_scroll  ","excerpt":"\u0026#34;manipulators\u0026#34;: [ { \u0026#34;type\u0026#34;: \u0026#34;basic\u0026#34;, \u0026#34;from\u0026#34;: {...}, \u0026#34;to\u0026#34;: …","ref":"/docs/json/complex-modifications-manipulator-definition/","title":"complex_modifications manipulator definition"},{"body":"You can switch profiles from menu bar.   Manage profiles You can manage profiles from Profiles tab.\nPress Add profile button to add new profile.\n  ","excerpt":"You can switch profiles from menu bar.   Manage profiles You can manage profiles from Profiles tab. …","ref":"/docs/manual/operation/profiles/","title":"Multiple profiles"},{"body":"Karabiner-Elements does not provide a way to change the keyboard type (ANSI, ISO, JIS).\nYou can change keyboard type via Keyboard Setup Assistant from System Preferences \u0026gt; Keyboard.\n  ","excerpt":"Karabiner-Elements does not provide a way to change the keyboard type (ANSI, ISO, JIS).\nYou can …","ref":"/docs/manual/configuration/configure-keyboard-type/","title":"Set keyboard type"},{"body":"to.modifiers is an array of the following strings.\n   Name Description     caps_lock \u0026mdash;   left_command \u0026mdash;   left_control \u0026mdash;   left_option \u0026mdash;   left_shift \u0026mdash;   right_command \u0026mdash;   right_control \u0026mdash;   right_option \u0026mdash;   right_shift \u0026mdash;   fn \u0026mdash;   command Alias of left_command   control Alias of left_control   option Alias of left_option   shift Alias of left_shift   left_alt Alias of left_option (available since Karabiner-Elements 12.3.0)   left_gui Alias of left_command (available since Karabiner-Elements 12.3.0)   right_alt Alias of right_option (available since Karabiner-Elements 12.3.0)   right_gui Alias of right_command (available since Karabiner-Elements 12.3.0)    ","excerpt":"to.modifiers is an array of the following strings.\n   Name Description     caps_lock \u0026mdash; …","ref":"/docs/json/complex-modifications-manipulator-definition/to/modifiers/","title":"to.modifiers"},{"body":"to_after_key_up posts events when the from key is released.\nTips to_after_key_up is typically used to:\n Unset variables using set_variable Used with to_if_held_down and to.halt in order to define fallback behavior.   Example The following json changes holding tab key to mission_control.\n{ \u0026#34;type\u0026#34;: \u0026#34;basic\u0026#34;, \u0026#34;from\u0026#34;: { \u0026#34;key_code\u0026#34;: \u0026#34;tab\u0026#34; }, \u0026#34;to_after_key_up\u0026#34;: [ { \u0026#34;key_code\u0026#34;: \u0026#34;tab\u0026#34; } ], \u0026#34;to_if_held_down\u0026#34;: [ { \u0026#34;key_code\u0026#34;: \u0026#34;mission_control\u0026#34;, \u0026#34;halt\u0026#34;: true } ] } ","excerpt":"to_after_key_up posts events when the from key is released.\nTips to_after_key_up is typically used …","ref":"/docs/json/complex-modifications-manipulator-definition/to-after-key-up/","title":"to_after_key_up"},{"body":"Change an event if/unless the variable is the specified value.\nTip variable_if and variable_unless are designed to use with set_variable.  { \u0026#34;type\u0026#34;: \u0026#34;variable_if\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;variable name\u0026#34;, \u0026#34;value\u0026#34;: variable value }    Name Required Description     type Required \u0026quot;variable_if\u0026quot; or \u0026quot;variable_unless\u0026quot;.   name Required Target variable name.   value Required Target variable value.   description Optional A human-readable comment    Confirm the current variable values You can see the current variable values by EventViewer \u0026gt; Variables.\n  ","excerpt":"Change an event if/unless the variable is the specified value.\nTip variable_if and variable_unless …","ref":"/docs/json/complex-modifications-manipulator-definition/conditions/variable/","title":"variable_if, variable_unless"},{"body":"Karabiner-Elements shows an icon in menu bar which provides the following functions:\n Switch profiles. Open Preferences. Check for updates. Open EventViewer. Quit Karabiner-Elements.  If you want to hide it, turn off \u0026ldquo;Show icon in menu bar\u0026rdquo; on Preferences \u0026gt; Misc tab.\n  ","excerpt":"Karabiner-Elements shows an icon in menu bar which provides the following functions:\n Switch …","ref":"/docs/manual/configuration/configure-menu-bar-icon/","title":"Configure icon in menu bar"},{"body":"Change an event if/unless the event is already changed by other manipulators.\n{ \u0026#34;type\u0026#34;: \u0026#34;event_changed_if\u0026#34;, \u0026#34;value\u0026#34;: true }    Name Required Description     type Required \u0026quot;event_changed_if\u0026quot; or \u0026quot;event_changed_unless\u0026quot;   value Required true or false   description Optional A human-readable comment    ","excerpt":"Change an event if/unless the event is already changed by other manipulators.\n{ \u0026#34;type\u0026#34;: …","ref":"/docs/json/complex-modifications-manipulator-definition/conditions/event-changed/","title":"event_changed_if, event_changed_unless"},{"body":"You can confirm log messages on Log tab.\n  ","excerpt":"You can confirm log messages on Log tab.\n  ","ref":"/docs/manual/operation/log/","title":"Show log messages"},{"body":"Karabiner-Elements stores configuration to a json file which is located ~/.config/karabiner/karabiner.json\nAbout symbolic link If you want to move karabiner.json to another place and make symbolic link, make a symbolic link to ~/.config/karabiner directory instead of karabiner.json.\nWarning Do not make a symlink to karabiner.json directly.\nKarabiner-Elements will fail to detect the configuration file update and fail to reload the configuration if karabiner.json is a symbolic link.\n Making symbolic link example The following command allows you to put karabiner.json on ~/Dropbox/private.\nmv ~/.config/karabiner ~/Dropbox/private ln -s ~/Dropbox/private/karabiner ~/.config  Note You have to restart karabiner_console_user_server process by the following command after you made a symlink in ordre to tell Karabiner-Elements that the parent directory is changed.\nlaunchctl kickstart -k gui/`id -u`/org.pqrs.karabiner.karabiner_console_user_server   ","excerpt":"Karabiner-Elements stores configuration to a json file which is located …","ref":"/docs/manual/misc/configuration-file-path/","title":"The location of the configuration file"},{"body":"to.lazy is true or false. The default value is false.\nIf to.lazy is true and to.key_code is modifier flag such as \u0026quot;key_code\u0026quot;: \u0026quot;left_shift\u0026quot;, the to.key_code acts as lazy modifier.\nThe lazy modifier does not send own key events until another key is pressed together.\nTip The lazy modifier is designed using with to_if_alone or key combinations such as changing left_control + h to delete_or_backspace in order to suppress unnecessary modifier key events.  Example The following json changes:\n left_control to the lazy left control left_control + m to return  Behavior of the json:\n The left_control key event will not be sent when you press left_control alone. Only the return key event will be sent when you press left_control + m. You can use left_control for other keys such as left_control + a, left_control + b, etc.  [ { \u0026#34;type\u0026#34;: \u0026#34;basic\u0026#34;, \u0026#34;from\u0026#34;: { \u0026#34;key_code\u0026#34;: \u0026#34;left_control\u0026#34; }, \u0026#34;to\u0026#34;: [ { \u0026#34;key_code\u0026#34;: \u0026#34;left_control\u0026#34;, \u0026#34;lazy\u0026#34;: true } ] }, { \u0026#34;type\u0026#34;: \u0026#34;basic\u0026#34;, \u0026#34;from\u0026#34;: { \u0026#34;key_code\u0026#34;: \u0026#34;m\u0026#34;, \u0026#34;modifiers\u0026#34;: { \u0026#34;mandatory\u0026#34;: [\u0026#34;left_control\u0026#34;], \u0026#34;optional\u0026#34;: [\u0026#34;any\u0026#34;] } }, \u0026#34;to\u0026#34;: [ { \u0026#34;key_code\u0026#34;: \u0026#34;return\u0026#34; } ] } ] ","excerpt":"to.lazy is true or false. The default value is false.\nIf to.lazy is true and to.key_code is modifier …","ref":"/docs/json/complex-modifications-manipulator-definition/to/lazy/","title":"to.lazy"},{"body":"to_delayed_action posts events after 500 milliseconds from the from key is pressed.\n to_delayed_action.to_if_invoked  An array of to events that will be sent if no other key is pressed after the from key is pressed.   to_delayed_action.to_if_canceled  An array of to events that will be sent if another key is pressed after the from key is pressed before to_delayed_action.to_if_invoked is sent.    Tips to_delayed_action is typically used to:\n Double tap key (e.g., change right_shift x2) 2 stroke keys such as C-x of Emacs Mode.   Example The following json provide Quit application by pressing command-q twice.\n[ { \u0026#34;type\u0026#34;: \u0026#34;basic\u0026#34;, \u0026#34;conditions\u0026#34;: [ { \u0026#34;type\u0026#34;: \u0026#34;variable_if\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;command-q\u0026#34;, \u0026#34;value\u0026#34;: 1 } ], \u0026#34;from\u0026#34;: { \u0026#34;key_code\u0026#34;: \u0026#34;q\u0026#34;, \u0026#34;modifiers\u0026#34;: { \u0026#34;mandatory\u0026#34;: [\u0026#34;command\u0026#34;], \u0026#34;optional\u0026#34;: [\u0026#34;caps_lock\u0026#34;] } }, \u0026#34;to\u0026#34;: [ { \u0026#34;key_code\u0026#34;: \u0026#34;q\u0026#34;, \u0026#34;modifiers\u0026#34;: \u0026#34;left_command\u0026#34; } ] }, { \u0026#34;type\u0026#34;: \u0026#34;basic\u0026#34;, \u0026#34;from\u0026#34;: { \u0026#34;key_code\u0026#34;: \u0026#34;q\u0026#34;, \u0026#34;modifiers\u0026#34;: { \u0026#34;mandatory\u0026#34;: [\u0026#34;command\u0026#34;], \u0026#34;optional\u0026#34;: [\u0026#34;caps_lock\u0026#34;] } }, \u0026#34;to\u0026#34;: [ { \u0026#34;set_variable\u0026#34;: { \u0026#34;name\u0026#34;: \u0026#34;command-q\u0026#34;, \u0026#34;value\u0026#34;: 1 } } ], \u0026#34;to_delayed_action\u0026#34;: { \u0026#34;to_if_invoked\u0026#34;: [ { \u0026#34;set_variable\u0026#34;: { \u0026#34;name\u0026#34;: \u0026#34;command-q\u0026#34;, \u0026#34;value\u0026#34;: 0 } } ], \u0026#34;to_if_canceled\u0026#34;: [ { \u0026#34;set_variable\u0026#34;: { \u0026#34;name\u0026#34;: \u0026#34;command-q\u0026#34;, \u0026#34;value\u0026#34;: 0 } } ] } } ] Parameters You can adjust the milliseconds invoking to_delayed_action by parameters \u0026gt; basic.to_delayed_action_delay_milliseconds as follows.\n{ \u0026#34;type\u0026#34;: \u0026#34;basic\u0026#34;, \u0026#34;from\u0026#34;: ..., \u0026#34;to_delayed_action\u0026#34;: ..., \u0026#34;parameters\u0026#34;: { \u0026#34;basic.to_delayed_action_delay_milliseconds\u0026#34;: 1000 } } ","excerpt":"to_delayed_action posts events after 500 milliseconds from the from key is pressed. …","ref":"/docs/json/complex-modifications-manipulator-definition/to-delayed-action/","title":"to_delayed_action"},{"body":"Reporting Bugs, Feature requests Please post an issue to GitHub.\n Karabiner-Elements KE-complex_modifications (About complex modifications)  Or post to Google Groups\nRequired information with bug reports Please fill your information when you send bug reports:\nRequired information  macOS version: Karabiner version:\n(You can confirm the version in \u0026ldquo;Misc \u0026amp; Uninstall\u0026rdquo; tab in Karabiner Preferences.) Your Mac hardware: Your keyboard hardware:   Example:\nmacOS version: macOS 10.15.2 Karabiner version: Karabiner-Elements 12.9.0 Your Mac hardware: MacBook Pro Your keyboard hardware: Das Keyboard 4 Professional for Mac Mechanical Keyboard  Other Send a message to author of Karabiner-Elements.\nNote I\u0026rsquo;m sorry I cannot spend enough time to reply for all mails since I\u0026rsquo;m receiving a lot mails.\nGitHub or Google Groups are suitable place to post it unless you have a private question.  ","excerpt":"Reporting Bugs, Feature requests Please post an issue to GitHub.\n Karabiner-Elements …","ref":"/docs/contact/","title":"Contact"},{"body":"You can export and import configuration by copying karabiner.json file to another machine.\nExport  Open config folder from Preferences \u0026gt; Misc.    Configuration folder will be opened by Finder. Copy the karabiner.json file.  Import  Open config folder from Preferences \u0026gt; Misc. Replace karabiner.json with the exported file. (The configuration file will be reloaded automatically.)  ","excerpt":"You can export and import configuration by copying karabiner.json file to another machine.\nExport …","ref":"/docs/manual/operation/export/","title":"Export and import configuration"},{"body":"to.repeat is true or false. The default value is true.\nThe key repeating will be suppressed if to.repeat is false.\nNote You have to set repeat in the last to event as follows if you have multiple to events and want to set to.repeat false.\n{ \u0026#34;to\u0026#34;: [ { \u0026#34;key_code\u0026#34;: \u0026#34;h\u0026#34; }, { \u0026#34;key_code\u0026#34;: \u0026#34;e\u0026#34; }, { \u0026#34;key_code\u0026#34;: \u0026#34;l\u0026#34; }, { \u0026#34;key_code\u0026#34;: \u0026#34;l\u0026#34; }, { \u0026#34;key_code\u0026#34;: \u0026#34;o\u0026#34;, \u0026#34;repeat\u0026#34;: false } ] }   Tip to.repeat affects key_up event sending timing as follows.\n If to.repeat is true:  key_up event is sent when you release the key.   If to.repeat is false:  key_down and key_up events are sent when you press the key.     ","excerpt":"to.repeat is true or false. The default value is true.\nThe key repeating will be suppressed if …","ref":"/docs/json/complex-modifications-manipulator-definition/to/repeat/","title":"to.repeat"},{"body":"Karabiner-Elements is an open source software and you can use it without any purchases.\nSupporting this project This project accepts your funding via GitHub Sponsors or PayPal.\nMonthly (GitHub Sponsors)    Takayama Fumihiko @tekezo  Open GitHub Sponsors page     One-time (PayPal)    Open PayPal Payments Form (Pay $10 for Karabiner-Elements)    Note: This is effectively a donation but it has taken the form of software fee because of Japanese law and the constraints on government regulation.    For donors I appreciate all donors. I received your donations!\nI\u0026rsquo;m afraid I don\u0026rsquo;t have enough time to reply for donors.\n(I\u0026rsquo;m giving priority to develop Karabiner-Elements at the moment.)\nMar 3, 2020\nTakayama Fumihiko   ","excerpt":"Karabiner-Elements is an open source software and you can use it without any purchases.\nSupporting …","ref":"/docs/pricing/","title":"Pricing"},{"body":"to.halt is true or false. The default value is false.\nThe typical usage of to.halt is to cancel to_after_key_up if to_if_alone or to_if_held_down is triggered.\nPut \u0026quot;halt\u0026quot;: true into to_if_alone or to_if_held_down if you want to suppress to_after_key_up when to_if_alone or to_if_held_down is triggered.\nExample The following json changes holding tab key to mission_control.\nThe halt in to_if_held_down suppresses to_after_key_up after mission_control is sent.\n{ \u0026#34;type\u0026#34;: \u0026#34;basic\u0026#34;, \u0026#34;from\u0026#34;: { \u0026#34;key_code\u0026#34;: \u0026#34;tab\u0026#34; }, \u0026#34;to_after_key_up\u0026#34;: [ { \u0026#34;key_code\u0026#34;: \u0026#34;tab\u0026#34; } ], \u0026#34;to_if_held_down\u0026#34;: [ { \u0026#34;key_code\u0026#34;: \u0026#34;mission_control\u0026#34;, \u0026#34;halt\u0026#34;: true } ] } ","excerpt":"to.halt is true or false. The default value is false.\nThe typical usage of to.halt is to cancel …","ref":"/docs/json/complex-modifications-manipulator-definition/to/halt/","title":"to.halt"},{"body":"to.hold_down_milliseconds is an integer value. The default value is 0.\nThe value is an interval of key_down and key_up when key_down and key_up events are sent at the same time such as multiple to events.\nNote Generally to.hold_down_milliseconds is used with \u0026quot;key_code\u0026quot;: \u0026quot;caps_lock\u0026quot;.  Example The following json changes caps_lock key to sending caps_lock key_down, wait 200 milliseconds, caps_lock key_up.\n{ \u0026#34;type\u0026#34;: \u0026#34;basic\u0026#34;, \u0026#34;from\u0026#34;: { \u0026#34;key_code\u0026#34;: \u0026#34;caps_lock\u0026#34;, \u0026#34;modifiers\u0026#34;: { \u0026#34;optional\u0026#34;: [\u0026#34;any\u0026#34;] } }, \u0026#34;to\u0026#34;: [ { \u0026#34;key_code\u0026#34;: \u0026#34;caps_lock\u0026#34;, \u0026#34;hold_down_milliseconds\u0026#34;: 200 }, { \u0026#34;key_code\u0026#34;: \u0026#34;vk_none\u0026#34; } ] } ","excerpt":"to.hold_down_milliseconds is an integer value. The default value is 0.\nThe value is an interval of …","ref":"/docs/json/complex-modifications-manipulator-definition/to/hold-down-milliseconds/","title":"to.hold_down_milliseconds"},{"body":"  Karabiner-Elements  A powerful and stable keyboard customizer for macOS.  Download   Toggle Dropdown  Download Karabiner-Elements-12.9.0\n For macOS Catalina (10.15) For macOS Mojave (10.14) For macOS High Sierra (10.13) For macOS Sierra (10.12)    Download Karabiner-Elements-11.6.0\n For macOS El Capitan (10.11)    Download Karabiner-10.22.0\n For macOS El Capitan (10.11) For macOS Yosemite (10.10) For macOS Mavericks (10.9)     Learn more        The latest release of Karabiner-Elements works on macOS 10.12 or later.  Release notes   GitHub          Easy to use You can configure simple key mappings from GUI.\nRead more …\n   Powerful There are many predefined powerful rules.\n Diamond cursor Emacs key bindings anywhere Vi key bindings Prevent unintended command-q Mouse keys  You can them import from the Internet.\nRead more …\n   Flexible You can write your own rules if you want to modify existence rules or create new rules from scratch.\nRead more …\n    ","excerpt":"Karabiner-Elements  A powerful and stable keyboard customizer for macOS.  Download   Toggle Dropdown …","ref":"/","title":"Karabiner-Elements"}]